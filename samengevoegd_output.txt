
==== codequiz/submit_result.php ====
<?php
require_once('../../config.php');
require_login();

global $DB, $USER, $CFG;

// Verkrijg de parameters uit de POST-request.
$courseid   = required_param('courseid', PARAM_INT);
$instanceid = required_param('instanceid', PARAM_INT);
$labels     = required_param('labels', PARAM_RAW);    // Verwacht een JSON-string
$message    = required_param('message', PARAM_TEXT);
$answers    = required_param('answers', PARAM_RAW);   // Nieuw: JSON-string met antwoorden

// Bouw het record dat in de database komt.
$record = new stdClass();
$record->codequizid  = $instanceid;
$record->courseid    = $courseid;
$record->userid      = $USER->id;
$record->labels      = $labels;
$record->message     = $message;
$record->answers     = $answers; // Nieuw veld
$record->timecreated = time();

// Sla het resultaat op in de tabel.
$insertid = $DB->insert_record('codequiz_results', $record);
if ($insertid) {
    // Forceer completion update
    require_once($CFG->libdir.'/completionlib.php');

    $course = get_course($courseid);
    $cm = get_coursemodule_from_instance('codequiz', $instanceid, $courseid);

    $completion = new completion_info($course);
    $completion->update_state($cm, COMPLETION_COMPLETE, $USER->id);
}

echo json_encode(['status' => 'success', 'id' => $insertid]);



==== codequiz/lib.php ====
<?php
// ===== ./mod/codequiz/lib.php =====

defined('MOODLE_INTERNAL') || die();

/**
 * Specificeer welke Moodle-features worden ondersteund.
 */
function codequiz_supports($feature) {
    switch ($feature) {
        case FEATURE_MOD_INTRO: return true;
        case FEATURE_COMPLETION_TRACKS_VIEWS: return true;
        case FEATURE_COMPLETION_HAS_RULES: return true;
        case FEATURE_GRADE_HAS_GRADE: return false; // Geen cijfers
        default: return null;
    }
}

/**
 * Voeg nieuwe instantie toe aan de database.
 */
function codequiz_add_instance(stdClass $data, mod_codequiz_mod_form $mform = null) {
    global $DB;

    $data->timecreated = time();
    $data->timemodified = $data->timecreated;
    $data->completionpass = !empty($data->completionpass) ? 1 : 0;
    $data->coursemodule = $data->coursemodule ?? 0;

    $id = $DB->insert_record('codequiz', $data);
    codequiz_save_questions($id, $data);
    return $id;
}

/**
 * Update bestaande instantie.
 */
function codequiz_update_instance(stdClass $data, mod_codequiz_mod_form $mform = null) {
    global $DB;

    $data->timemodified = time();
    $data->id = $data->instance;
    $data->completionpass = !empty($data->completionpass) ? 1 : 0;
    $data->coursemodule = $data->coursemodule ?? 0;

    $DB->update_record('codequiz', $data);
    codequiz_save_questions($data->id, $data);
    return true;
}

/**
 * Verwijder een codequiz-instantie.
 */
function codequiz_delete_instance($id) {
    global $DB;

    $DB->delete_records('codequiz_results', ['codequizid' => $id]);
    $DB->delete_records('codequiz_questions', ['codequizid' => $id]);
    return $DB->delete_records('codequiz', ['id' => $id]);
}

/**
 * Ophalen van resultaat van gebruiker.
 */
function codequiz_get_result($instanceid, $userid) {
    global $DB;
    return $DB->get_record('codequiz_results', [
        'codequizid' => $instanceid,
        'userid' => $userid
    ], '*', IGNORE_MULTIPLE);
}

/**
 * Completion: is deze activiteit voltooid?
 */
function codequiz_get_completion_state($course, $cm, $userid, $type) {
    global $DB;

    return $DB->record_exists_sql(
        "SELECT 1
         FROM {codequiz_results} cr
         JOIN {codequiz} c ON c.id = cr.codequizid
         WHERE cr.userid = :userid
           AND c.id = :instanceid
           AND c.completionpass = 1",
        [
            'userid' => $userid,
            'instanceid' => $cm->instance
        ]
    );
}

/**
 * Completion: omschrijving voor instelling.
 */
function codequiz_get_completion_rule_descriptions($cm) {
    global $DB;
    $instance = $DB->get_record('codequiz', ['id' => $cm->instance]);

    $descriptions = [];
    if (!empty($instance->completionpass)) {
        $descriptions[] = get_string('completionpass', 'codequiz');
    }
    return $descriptions;
}

function codequiz_completion_rule_enabled($data) {
    return !empty($data->completionpass);
}

function codequiz_get_coursemodule_info($coursemodule) {
    global $DB;
    $instance = $DB->get_record('codequiz', ['id' => $coursemodule->instance]);

    $info = new cached_cm_info();
    $info->customcompletionrules = ['completionpass' => $instance->completionpass];
    return $info;
}

/**
 * Sla de herhaalbare vragen op.
 */
function codequiz_save_questions($quizid, $data) {
    global $DB;

    $DB->delete_records('codequiz_questions', ['codequizid' => $quizid]);

    if (!empty($data->vraagtext)) {
        foreach ($data->vraagtext as $index => $vraagtext) {
            $mediahtml = $data->mediahtml[$index]['text'] ?? '';
            $crop = isset($data->crop[$index]) ? (int)$data->crop[$index] : 1;
            $optiesjson = $data->optiesjson[$index] ?? '[]';

            if (empty(trim($mediahtml)) && isset($data->mediaupload[$index])) {
                $draftitemid = $data->mediaupload[$index];
                $context = context_module::instance($data->coursemodule);

                file_save_draft_area_files(
                    $draftitemid,
                    $context->id,
                    'mod_codequiz',
                    'mediaupload',
                    $quizid * 100 + $index
                );

                $fs = get_file_storage();
                $files = $fs->get_area_files(
                    $context->id,
                    'mod_codequiz',
                    'mediaupload',
                    $quizid * 100 + $index,
                    '',
                    false
                );

                foreach ($files as $file) {
                    $url = moodle_url::make_pluginfile_url(
                        $file->get_contextid(),
                        'mod_codequiz',
                        'mediaupload',
                        $file->get_itemid(),
                        $file->get_filepath(),
                        $file->get_filename()
                    );
                    $mediahtml = '<img src="' . $url . '" alt="">';
                    break;
                }
            }

            $vraag = new stdClass();
            $vraag->codequizid = $quizid;
            $vraag->vraag = $vraagtext;
            $vraag->mediahtml = $mediahtml;
            $vraag->crop = $crop;
            $vraag->opties = $optiesjson;
            $vraag->sortorder = $index;

            $DB->insert_record('codequiz_questions', $vraag);
        }
    }
}

/**
 * Bestandsserver: pluginfile handler voor mediaupload.
 */
function codequiz_pluginfile($course, $cm, $context, $filearea, $args, $forcedownload, array $options = []) {
    global $DB;

    if ($context->contextlevel != CONTEXT_MODULE) {
        return false;
    }

    require_course_login($course, true, $cm);

    if (!has_capability('mod/codequiz:view', $context)) {
        return false;
    }

    if ($filearea !== 'mediaupload') {
        return false;
    }

    $itemid = array_shift($args);
    $filepath = '/';
    $filename = array_pop($args);
    if (!empty($args)) {
        $filepath .= implode('/', $args) . '/';
    }

    $fs = get_file_storage();
    $file = $fs->get_file($context->id, 'mod_codequiz', $filearea, $itemid, $filepath, $filename);

    if (!$file || $file->is_directory()) {
        return false;
    }

    send_stored_file($file, 0, 0, $forcedownload, $options);
}



==== codequiz/pluginfile.php ====
<?php
// ===== ./mod/codequiz/pluginfile.php =====
defined('MOODLE_INTERNAL') || die();

require_once(__DIR__ . '/../../config.php');
require_login();

function codequiz_pluginfile($course, $cm, $context, $filearea, $args, $forcedownload, array $options = []) {
    global $DB;

    if ($context->contextlevel != CONTEXT_MODULE) {
        return false;
    }

    // Controleer of de gebruiker toegang heeft
    require_course_login($course, true, $cm);

    if (!has_capability('mod/codequiz:view', $context)) {
        return false;
    }

    // Alleen bestanden in 'mediaupload' worden geserveerd
    if ($filearea !== 'mediaupload') {
        return false;
    }

    // Parameters uit de $args array
    // args = [itemid, [path1, path2, ...,] filename]
    $itemid = array_shift($args);
    $filepath = '/';
    $filename = array_pop($args);
    if (!empty($args)) {
        $filepath .= implode('/', $args) . '/';
    }

    $fs = get_file_storage();
    $file = $fs->get_file($context->id, 'mod_codequiz', $filearea, $itemid, $filepath, $filename);

    if (!$file || $file->is_directory()) {
        return false;
    }

    // Lever bestand op
    send_stored_file($file, 0, 0, $forcedownload, $options);
}



==== codequiz/script.js ====
class Scherm {
  constructor(vraag, mediaHTML, opties, crop = true) {
    this.vraag = vraag;
    this.mediaHTML = mediaHTML;
    this.opties = opties;
    this.crop = crop;
  }
}

document.addEventListener("DOMContentLoaded", function () {
  const config = window.codequizConfig;
  const schermen = config.vraagSchermen.map(v => new Scherm(v.vraag, v.mediaHTML, v.opties, v.crop));

  const container = document.getElementById("quiz-container");
  const navButtons = document.querySelector(".nav-buttons");
  const prevBtn = document.getElementById("prevBtn");
  const nextBtn = document.getElementById("nextBtn");

  const screens = [];
  let currentScreen = 0;
  const answers = [];

  schermen.forEach((scherm, index) => {
    const screen = document.createElement("div");
    screen.classList.add("screen");
    if (index === 0) screen.classList.add("active");

    const wrapper = document.createElement("div");
    wrapper.classList.add("content-wrapper");

    const vraagDiv = document.createElement("div");
    vraagDiv.classList.add("question-container");
    vraagDiv.innerHTML = `<h2>Vraag ${index + 1}</h2><p>${scherm.vraag}</p>`;

    let optiesHTML = '<div class="options-container">';
    scherm.opties.forEach(optie => {
      optiesHTML += `
        <div class="option">
          <input type="radio" id="q${index}-opt${optie.value}" name="vraag${index}" value="${optie.value}">
          <label for="q${index}-opt${optie.value}">${optie.text}</label>
        </div>`;
    });
    optiesHTML += '</div>';
    vraagDiv.innerHTML += optiesHTML;

    const mediaDiv = document.createElement("div");
    mediaDiv.classList.add("media-container");
    if (!scherm.crop) mediaDiv.classList.add("no-crop");
    mediaDiv.innerHTML = scherm.mediaHTML;

    wrapper.appendChild(vraagDiv);
    wrapper.appendChild(mediaDiv);
    screen.appendChild(wrapper);
    container.insertBefore(screen, navButtons);
    screens.push(screen);
  });

  function showScreen(index, direction = 'next') {
    const outgoing = screens[currentScreen];
    const incoming = screens[index];

    incoming.style.transition = "none";
    incoming.style.transform = direction === 'next' ? "translateX(100%)" : "translateX(-100%)";
    incoming.style.opacity = "0";
    incoming.style.display = "block";

    requestAnimationFrame(() => {
      incoming.style.transition = "transform 0.4s ease, opacity 0.4s ease";
      outgoing.style.transition = "transform 0.4s ease, opacity 0.4s ease";

      incoming.classList.add("active");
      incoming.style.transform = "translateX(0)";
      incoming.style.opacity = "1";

      outgoing.style.transform = direction === 'next' ? "translateX(-100%)" : "translateX(100%)";
      outgoing.style.opacity = "0";

      setTimeout(() => {
        outgoing.classList.remove("active");
        outgoing.style.display = "none";
        outgoing.style.transform = "translateX(100%)";
      }, 400);
    });

    currentScreen = index;
  }

  function updateNavButtons() {
    prevBtn.style.display = currentScreen === 0 ? "none" : "inline-block";
    nextBtn.disabled = !document.querySelector(`input[name="vraag${currentScreen}"]:checked`);
    nextBtn.textContent = currentScreen === screens.length - 1 ? "Afronden" : "Volgende";
  }

  document.addEventListener("change", () => updateNavButtons());

  nextBtn.addEventListener("click", () => {
    const selected = document.querySelector(`input[name="vraag${currentScreen}"]:checked`);
    if (!selected) return;

    answers[currentScreen] = parseInt(selected.value);

    if (currentScreen < screens.length - 1) {
      showScreen(currentScreen + 1, 'next');
      updateNavButtons();
    } else {
      finishQuiz();
    }
  });

  prevBtn.addEventListener("click", () => {
    if (currentScreen > 0) {
      showScreen(currentScreen - 1, 'prev');
      updateNavButtons();
    }
  });

  function finishQuiz() {
    if (answers.length < schermen.length || answers.includes(undefined)) {
      console.error("Niet alle vragen zijn beantwoord.");
      return;
    }

    const total = answers.reduce((a, b) => a + b, 0);
    const labels = [];
    let message = "";

    if (total > 5) {
      labels.push("expert developer");
      message = "Je bent een expert developer. Ga aan de slag met de moeilijkste opdrachten.";
    } else if (total >= 3) {
      labels.push("skilled developer");
      message = "Je bent een skilled developer. Kies gemiddeld moeilijke opdrachten.";
    } else {
      labels.push("aspiring developer");
      message = "Je bent een aspiring developer. Begin met de basistaken.";
    }

    const resultData = { labels, message, answers };

    saveResultToDB(resultData).then(() => {
      renderFinalScreen(labels, message);
    });
  }

  function renderFinalScreen(labels, message) {
    navButtons.remove();

    container.innerHTML = `
      <canvas id="matrix"></canvas>
      <div class="final-content">
        <h2>Aanbeveling</h2>
        <p id="result-text"></p>
        <div id="labels-container"></div>
        <p id="final-message">${message}</p>
        <button id="resetBtn">Opnieuw maken</button>
      </div>`;

    const labelContainer = document.getElementById("labels-container");
    labels.forEach(label => {
      const span = document.createElement("span");
      span.textContent = label;
      span.style.backgroundColor = label.includes("expert") ? "red" : label.includes("skilled") ? "green" : "blue";
      span.style.color = "white";
      span.style.padding = "5px 10px";
      span.style.marginRight = "5px";
      span.style.borderRadius = "5px";
      labelContainer.appendChild(span);
    });

    document.getElementById("result-text").textContent = labels.length === 1
      ? "Uit de test blijkt dat de opdrachten met de volgende label het best bij je past:"
      : "Uit de test blijkt dat de opdrachten met de volgende labels het best bij je passen:";

    document.getElementById("resetBtn").addEventListener("click", () => {
      fetch("delete_result.php", {
        method: "POST",
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: new URLSearchParams({
          courseid: config.courseid,
          instanceid: config.instanceid
        })
      }).then(res => res.json()).then(data => {
        if (data.status === 'success') {
          location.reload();
        } else {
          alert("Kon resultaat niet wissen.");
        }
      }).catch(err => {
        console.error("Fout bij resetten:", err);
      });
    });

    startMatrix();
  }

  function saveResultToDB(resultData) {
    return fetch('submit_result.php', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: new URLSearchParams({
        courseid: config.courseid,
        instanceid: config.instanceid,
        labels: JSON.stringify(resultData.labels),
        message: resultData.message,
        answers: JSON.stringify(resultData.answers) // Nieuw toegevoegd
      })
    })
      .then(res => res.json())
      .then(data => {
        if (!data || data.status !== 'success') {
          console.error('Fout bij opslaan:', data);
        } else {
          console.log('Resultaat opgeslagen:', data);
        }
      })
      .catch(error => {
        console.error('Netwerkfout bij opslaan van resultaat:', error);
      });
  }

  function startMatrix() {
    const canvas = document.getElementById("matrix");
    const ctx = canvas.getContext("2d");
    canvas.width = container.offsetWidth;
    canvas.height = container.offsetHeight;
    const words = ["print", "python", "for", "if", "class", "input", "import", "return"];
    const fontSize = 16;
    const columnWidth = 45;
    const columns = Math.floor(canvas.width / columnWidth);
    const drops = Array.from({ length: columns }, () => Math.floor(Math.random() * canvas.height / fontSize));

    function draw() {
      ctx.fillStyle = "rgba(0, 0, 0, 0.05)";
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = "#0F0";
      ctx.font = fontSize + "px monospace";
      for (let i = 0; i < drops.length; i++) {
        const text = words[Math.floor(Math.random() * words.length)];
        ctx.fillText(text, i * columnWidth, drops[i] * fontSize);
        if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {
          drops[i] = 0;
        }
        drops[i]++;
      }
    }

    setInterval(draw, 66);
  }

  updateNavButtons();

  if (config.storedResult) {
    renderFinalScreen(config.storedResult.labels, config.storedResult.message);
  }
});



==== codequiz/styles.css ====
.codequiz-wrapper {
  background-color: #111;
  color: #e0e0e0;
  font-family: 'Courier New', Courier, monospace;
  font-size: 18px;
  padding: 20px;
  border-radius: 5px;
  margin: 20px auto;
  max-width: 1200px;
  position: relative;
  z-index: 1;
}

#quiz-container {
  position: relative;
  min-height: 500px;
  overflow: hidden;
}

.content-wrapper {
  display: flex;
  width: 100%;
  height: 100%;
  flex-wrap: wrap;
}

.question-container {
  width: 50%;
  padding: 20px;
  box-sizing: border-box;
  padding-top: 10vh;
}

.media-container {
  width: 50%;
  padding: 20px;
  box-sizing: border-box;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
}

.media-container img,
.media-container iframe {
  max-width: 100%;
  max-height: 100%;
  object-fit: cover;
}

.media-container.no-crop img {
  object-fit: contain;
  height: auto;
  max-height: 100%;
  width: auto;
}

.options-container {
  margin-top: 20px;
}

.option {
  margin-bottom: 10px;
}

.nav-buttons {
  text-align: center;
  margin-top: 30px;
}

.nav-buttons button {
  background-color: #333;
  color: #e0e0e0;
  border: none;
  padding: 10px 20px;
  margin: 0 10px;
  cursor: pointer;
  font-size: 18px;
  transition: background-color 0.3s;
  border-radius: 6px;
}

.nav-buttons button:hover:not(:disabled) {
  background-color: #555;
}

.nav-buttons button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.final-content {
  background: #000;
  color: #0f0;
  font-family: monospace;
  padding: 30px;
  border-radius: 10px;
  text-align: center;
  position: relative;
  z-index: 1;
  max-width: 800px;
  margin: 50px auto;
}

#matrix {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 0;
  width: 100%;
  height: 100%;
  background: black;
  pointer-events: none;
  border-radius: 10px;
}

#labels-container span {
  display: inline-block;
  margin: 5px;
  padding: 5px 12px;
  border-radius: 4px;
  font-weight: bold;
}

button {
  border-radius: 4px;
  font-family: monospace;
  font-size: 16px;
  padding: 10px 20px;
  background-color: #0f0;
  color: #000;
  border: none;
  cursor: pointer;
  margin-top: 20px;
}

button:hover {
  background-color: #6f6;
}

/* === Slide transitions === */
.screen {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  transition: transform 0.4s ease, opacity 0.4s ease;
  opacity: 0;
  transform: translateX(100%);
  z-index: 0;
  pointer-events: none;
}

.screen.active {
  opacity: 1;
  transform: translateX(0);
  z-index: 1;
  pointer-events: auto;
}
#quiz-container {
  position: relative;
  min-height: 500px;
  overflow: hidden;
}

/* Slide-animatie voor quizschermen */
.screen {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  transition: transform 0.4s ease, opacity 0.4s ease;
  opacity: 0;
  transform: translateX(100%);
  z-index: 0;
  pointer-events: none;
  height: 100%;
}

.screen.active {
  opacity: 1;
  transform: translateX(0);
  z-index: 1;
  pointer-events: auto;
}

/* Zet navigatieknoppen onderin het quizgedeelte */
.nav-buttons {
  position: absolute;
  bottom: 20px;
  left: 50%;
  transform: translateX(-50%);
  width: 100%;
  text-align: center;
  z-index: 2;
}


==== codequiz/view.php ====
<?php
// ===== ./codequiz/view.php =====

require_once('../../config.php');
require_once($CFG->dirroot.'/mod/codequiz/lib.php');

$id = required_param('id', PARAM_INT);
[$course, $cm] = get_course_and_cm_from_cmid($id, 'codequiz');
require_login($course, true, $cm);

$PAGE->set_url('/mod/codequiz/view.php', ['id' => $id]);
$PAGE->set_title($cm->name);
$PAGE->set_heading($course->fullname);
$PAGE->set_pagelayout('incourse');

global $DB, $USER;
$instance = $DB->get_record('codequiz', ['id' => $cm->instance], '*', MUST_EXIST);
$stored_result = codequiz_get_result($cm->instance, $USER->id);
if ($stored_result) {
    $stored_result_data = [
        "labels" => json_decode($stored_result->labels, true),
        "message" => $stored_result->message
    ];
} else {
    $stored_result_data = null;
}

$questions = $DB->get_records('codequiz_questions', ['codequizid' => $cm->instance], 'sortorder ASC');
$vraagSchermen = [];
foreach ($questions as $q) {
    $vraagSchermen[] = [
        'vraag' => $q->vraag,
        'mediaHTML' => $q->mediahtml,
        'crop' => (bool)$q->crop,
        'opties' => json_decode($q->opties, true)
    ];
}

echo $OUTPUT->header();

// Voeg een dashboard navigatielink toe voor gebruikers met de juiste capability
$context = context_module::instance($cm->id);
if (has_capability('mod/codequiz:managedashboard', $context)) {
    $dashboardurl = new moodle_url('/mod/codequiz/dashboard.php', ['courseid' => $course->id, 'instanceid' => $cm->instance]);
    echo html_writer::tag('div', html_writer::link($dashboardurl, get_string('dashboard', 'codequiz'), ['class' => 'dashboard-link']), ['style' => 'margin-bottom: 20px;']);
}
?>

<script>
  window.codequizConfig = {
    courseid: <?php echo $course->id; ?>,
    instanceid: <?php echo $cm->instance; ?>,
    storedResult: <?php echo json_encode($stored_result_data); ?>,
    vraagSchermen: <?php echo json_encode($vraagSchermen); ?>
  };
</script>

<link rel="stylesheet" href="<?php echo $CFG->wwwroot; ?>/mod/codequiz/styles.css">

<div class="codequiz-wrapper">
  <div id="quiz-container">
    <div class="nav-buttons">
      <button id="prevBtn">Vorige</button>
      <button id="nextBtn" disabled>Volgende</button>
    </div>
  </div>
</div>

<script src="script.js"></script>

<?php
echo $OUTPUT->footer();



==== codequiz/dashboard.php ====
<?php
require_once('../../config.php');

$courseid   = required_param('courseid', PARAM_INT);
$instanceid = required_param('instanceid', PARAM_INT);

if (!$cm = get_coursemodule_from_instance('codequiz', $instanceid, $courseid)) {
    print_error('invalidcoursemodule');
}
$course = get_course($courseid);
require_login($course, true, $cm);

$context = context_module::instance($cm->id);
require_capability('mod/codequiz:managedashboard', $context);

$PAGE->set_url('/mod/codequiz/dashboard.php', ['courseid' => $courseid, 'instanceid' => $instanceid]);
$PAGE->set_title('Code Quiz Dashboard');
$PAGE->set_heading($course->fullname);
$PAGE->set_pagelayout('incourse');

// Resultaten ophalen
$results = $DB->get_records('codequiz_results', ['codequizid' => $instanceid]);
$totalSubmissions = count($results);

// Vragen ophalen
$questions = $DB->get_records('codequiz_questions', ['codequizid' => $instanceid], 'sortorder ASC');

$optionMap = [];
foreach ($questions as $question) {
    $sortindex = (int)$question->sortorder;
    $opties = json_decode($question->opties, true);
    foreach ($opties as $optie) {
        $optionMap[$sortindex][(string)$optie['value']] = $optie['text'];
    }
}

// Wordcloud data + gebruikersmapping
$answerTextCounts = [];
$answerUserMap = [];
foreach ($results as $result) {
    $answers = json_decode($result->answers ?? '', true);
    $user = $DB->get_record('user', ['id' => $result->userid]);
    $fullname = fullname($user);

    if (is_array($answers)) {
        foreach ($answers as $i => $value) {
            $text = $optionMap[$i][(string)$value] ?? null;
            if ($text) {
                $answerTextCounts[$text] = ($answerTextCounts[$text] ?? 0) + 1;
                $answerUserMap[$text][] = $fullname;
            }
        }
    }
}

// Labels tellen
$labelCounts = [];
foreach ($results as $result) {
    $decodedLabels = json_decode($result->labels, true);
    if (is_array($decodedLabels)) {
        foreach ($decodedLabels as $label) {
            $labelCounts[$label] = ($labelCounts[$label] ?? 0) + 1;
        }
    }
}

$chartLabels = array_keys($labelCounts);
$chartData = array_values($labelCounts);

echo $OUTPUT->header();
?>

<!-- Chart.js & WordCloud2 -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/wordcloud2.js/1.1.1/wordcloud2.min.js"></script>

<style>
.dashboard-wrapper {
    padding: 20px;
}
.dashboard-table {
    width: 100%;
    border-collapse: collapse;
}
.dashboard-table th, .dashboard-table td {
    border: 1px solid #ccc;
    padding: 8px;
    text-align: left;
}
.dashboard-table th {
    background-color: #f5f5f5;
}
#wordcloud {
    width: 100%;
    height: 400px;
    border: 1px solid #ccc;
    margin-top: 30px;
}

/* Modal styling */
#modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.6);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 999;
    opacity: 0;
    transition: opacity 0.3s ease;
}

#modal-overlay.show {
    display: flex;
    opacity: 1;
}

.modal {
    background: white;
    color: #333;
    padding: 30px;
    border-radius: 10px;
    max-width: 500px;
    width: 90%;
    box-shadow: 0 0 20px rgba(0,0,0,0.4);
    position: relative;
    z-index: 1000;
    display: block;
    max-height: 80vh;
    overflow-y: auto;
}
.modal h3 {
    margin-top: 0;
}
.modal ul {
    padding-left: 20px;
}
.modal-close {
    position: absolute;
    top: 10px;
    right: 15px;
    font-size: 24px;
    cursor: pointer;
}
</style>

<div class="dashboard-wrapper">
    <h2>Code Quiz Dashboard</h2>
    <p>Totaal aantal inzendingen: <?php echo $totalSubmissions; ?></p>

    <!-- Pie Chart -->
    <div style="width: 400px; margin-bottom: 20px;">
        <canvas id="labelsPieChart" width="400" height="400"></canvas>
    </div>

    <!-- Wordcloud -->
    <h3>Antwoord Wordcloud</h3>
    <div id="wordcloud"></div>

    <?php if ($totalSubmissions > 0): ?>
        <table class="dashboard-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Gebruikersnaam</th>
                    <th>Label</th>
                    <th>Antwoorden</th>
                    <th>Tijd van inzending</th>
                </tr>
            </thead>
            <tbody>
                <?php foreach ($results as $result):
                    $user = $DB->get_record('user', ['id' => $result->userid]);
                    $fullname = fullname($user);

                    $decodedLabel = json_decode($result->labels, true);
                    $labelText = is_array($decodedLabel) ? implode(", ", $decodedLabel) : $result->labels;

                    $decodedAnswers = json_decode($result->answers ?? '', true);
                    $answerTextList = [];
                    foreach ($decodedAnswers ?? [] as $i => $v) {
                        $answerTextList[] = $optionMap[$i][(string)$v] ?? $v;
                    }
                    $answerText = implode(", ", $answerTextList);
                ?>
                    <tr>
                        <td><?php echo $result->id; ?></td>
                        <td><?php echo $fullname; ?></td>
                        <td><?php echo $labelText; ?></td>
                        <td><?php echo $answerText; ?></td>
                        <td><?php echo date('Y-m-d H:i:s', $result->timecreated); ?></td>
                    </tr>
                <?php endforeach; ?>
            </tbody>
        </table>
    <?php else: ?>
        <p>Geen inzendingen gevonden.</p>
    <?php endif; ?>
</div>

<!-- Modal -->
<div id="modal-overlay">
  <div class="modal">
    <span class="modal-close" onclick="closeModal()">&times;</span>
    <h3 id="modal-title"></h3>
    <ul id="modal-content"></ul>
  </div>
</div>

<script>
const answerUserMap = <?php echo json_encode($answerUserMap); ?>;

document.addEventListener('DOMContentLoaded', function() {
    // Pie chart
    const ctx = document.getElementById('labelsPieChart').getContext('2d');
    const chartLabels = <?php echo json_encode($chartLabels); ?>;
    const chartData = <?php echo json_encode($chartData); ?>;

    new Chart(ctx, {
        type: 'pie',
        data: {
            labels: chartLabels,
            datasets: [{
                data: chartData,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.6)',
                    'rgba(54, 162, 235, 0.6)',
                    'rgba(255, 206, 86, 0.6)',
                    'rgba(75, 192, 192, 0.6)',
                    'rgba(153, 102, 255, 0.6)',
                    'rgba(255, 159, 64, 0.6)'
                ]
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: { position: 'top' },
                title: { display: true, text: 'Verdeelde labels' }
            }
        }
    });

    // Wordcloud
    const wordCounts = <?php echo json_encode($answerTextCounts); ?>;
    const wordList = Object.entries(wordCounts);

    WordCloud(document.getElementById('wordcloud'), {
        list: wordList,
        gridSize: Math.round(16 * document.getElementById('wordcloud').offsetWidth / 1024),
        weightFactor: function (size) { return size * 3; },
        fontFamily: 'monospace',
        color: 'random-dark',
        backgroundColor: '#fff',
        click: function (item) {
            const woord = item[0];
            const gebruikers = answerUserMap[woord] || [];
            openModal(woord, gebruikers);
        }
    });
});

function openModal(title, users) {
    const overlay = document.getElementById('modal-overlay');
    const modalTitle = document.getElementById('modal-title');
    const modalContent = document.getElementById('modal-content');

    modalTitle.textContent = `Antwoord: "${title}"`;
    modalContent.innerHTML = '';

    if (users.length > 0) {
        users.forEach(name => {
            const li = document.createElement('li');
            li.textContent = name;
            modalContent.appendChild(li);
        });
    } else {
        const li = document.createElement('li');
        li.textContent = 'Geen gebruikers gevonden.';
        modalContent.appendChild(li);
    }

    overlay.classList.add('show');
}

function closeModal() {
    const overlay = document.getElementById('modal-overlay');
    overlay.classList.remove('show');
}
</script>

<?php
echo $OUTPUT->footer();



==== codequiz/mod_form.php ====
<?php
defined('MOODLE_INTERNAL') || die();
require_once($CFG->dirroot . '/course/moodleform_mod.php');
require_once($CFG->libdir . '/filelib.php');

class mod_codequiz_mod_form extends moodleform_mod {

    public function definition() {
        $mform = $this->_form;

        // Activiteitsnaam
        $mform->addElement('text', 'name', get_string('name'), ['size' => '64']);
        $mform->setType('name', PARAM_TEXT);
        $mform->addRule('name', null, 'required', null, 'client');

        // Introductie
        $this->standard_intro_elements();

        // Herhaalbare vragen
        $repeatarray = [];

        $repeatarray[] = $mform->createElement('text', 'vraagtext', 'Vraagtekst');
        $repeatarray[] = $mform->createElement('filemanager', 'mediaupload', 'Afbeelding (upload)', null, [
            'subdirs' => 0,
            'maxbytes' => 10485760,
            'maxfiles' => 1,
            'accepted_types' => ['image'],
            'return_types' => FILE_INTERNAL
        ]);
        $repeatarray[] = $mform->createElement('editor', 'mediahtml', 'Media (HTML, optioneel)');
        $repeatarray[] = $mform->createElement('selectyesno', 'crop', 'Media croppen?');
        $repeatarray[] = $mform->createElement('textarea', 'optiesjson', 'Opties (JSON)');

        $repeateloptions = [
            'vraagtext' => ['type' => PARAM_TEXT],
            'mediahtml' => ['type' => PARAM_RAW],
            'crop' => ['type' => PARAM_INT],
            'optiesjson' => ['type' => PARAM_RAW],
        ];

        $this->repeat_elements(
            $repeatarray,
            1,
            $repeateloptions,
            'vragen_repeats',
            'vragen_add_fields',
            1,
            get_string('addquestion', 'codequiz'),
            true
        );

        $this->standard_coursemodule_elements();
        $this->add_completion_rules();
        $this->add_action_buttons();
    }

    public function add_completion_rules() {
        $mform = $this->_form;

        $mform->addElement('checkbox', 'completionpass',
            get_string('completionpass_label', 'codequiz'),
            get_string('completionpass', 'codequiz')
        );
        $mform->addHelpButton('completionpass', 'completionpass', 'codequiz');

        return ['completionpass'];
    }

    public function completion_rule_enabled($data) {
        return !empty($data['completionpass']);
    }

    public function get_completion_rule_descriptions() {
        return [
            'completionpass' => get_string('completionpass', 'codequiz')
        ];
    }

    public function get_data() {
        $data = parent::get_data();
        if ($data) {
            $data->completionpass = !empty($data->completionpass) ? 1 : 0;
        }
        return $data;
    }

    public function data_preprocessing(&$defaultvalues) {
    global $DB;

    if ($this->is_add_repeat_elements()) {
        error_log('DEBUG: Nieuw herhaalveld toegevoegd — data_preprocessing() overslaan');
        return;
    }

    parent::data_preprocessing($defaultvalues);
    $defaultvalues['completionpass'] = $this->get_current_completionpass();

    if (empty($this->current) || empty($this->current->id)) {
        error_log("DEBUG: Geen bestaande instance ID — stoppen");
        return;
    }

    $context = $this->context;
    $questions = $DB->get_records('codequiz_questions', ['codequizid' => $this->current->id], 'sortorder ASC');

    $vraagtext = [];
    $mediahtml = [];
    $mediaupload = [];
    $crop = [];
    $optiesjson = [];

    $i = 0;
    foreach ($questions as $question) {
        $vraagtext[$i] = $question->vraag ?? '';

        $mediahtml[$i] = [
            'text' => $question->mediahtml ?? '',
            'format' => FORMAT_HTML
        ];

        $crop[$i] = isset($question->crop) ? (int)$question->crop : 1;

        $optiesjson[$i] = isset($question->opties) && is_string($question->opties)
            ? $question->opties
            : json_encode([], JSON_PRETTY_PRINT);

        $draftid = file_get_submitted_draft_itemid("mediaupload[{$i}]");
        file_prepare_draft_area(
            $draftid,
            $context->id,
            'mod_codequiz',
            'mediaupload',
            $this->current->id * 100 + $i,
            [
                'subdirs' => 0,
                'maxbytes' => 10485760,
                'maxfiles' => 1,
                'accepted_types' => ['image'],
                'return_types' => FILE_INTERNAL
            ]
        );
        $mediaupload[$i] = $draftid;

        $i++;
    }

    // 📌 Zet aantal herhalingen vóór je de velden vult
    $defaultvalues['vragen_repeats'] = $i;

    $defaultvalues['vraagtext'] = $vraagtext;
    $defaultvalues['mediahtml'] = $mediahtml;
    $defaultvalues['crop'] = $crop;
    $defaultvalues['optiesjson'] = $optiesjson;
    $defaultvalues['mediaupload'] = $mediaupload;

}


    /**
     * Detecteert of de gebruiker op "voeg extra vraag toe" heeft geklikt.
     */
    private function is_add_repeat_elements(): bool {
        return optional_param('vragen_add_fields', 0, PARAM_INT) > 0;
    }

    private function get_current_completionpass() {
        global $DB;

        if ($this->current && $this->current->id) {
            return $DB->get_field('codequiz', 'completionpass', ['id' => $this->current->id]);
        }
        return 0;
    }
}



==== codequiz/version.php ====
<?php
defined('MOODLE_INTERNAL') || die();

$plugin->component = 'mod_codequiz';
$plugin->version   = 2024032478;
$plugin->requires  = 2022112800; // minimaal Moodle 4.x
$plugin->maturity  = MATURITY_STABLE;
$plugin->release   = 'v1.0';



==== codequiz/delete_result.php ====
<?php
require_once('../../config.php');
require_login();

global $DB, $USER, $CFG;

$courseid = required_param('courseid', PARAM_INT);
$instanceid = required_param('instanceid', PARAM_INT);

// Verwijder resultaten
$DB->delete_records('codequiz_results', [
    'codequizid' => $instanceid,
    'userid' => $USER->id,
    'courseid' => $courseid
]);

// Directe completion reset
require_once($CFG->libdir.'/completionlib.php');

if ($cm = get_coursemodule_from_instance('codequiz', $instanceid, $courseid)) {
    $completion = new completion_info(get_course($courseid));

    // Forceer reset van de status
    $completion->delete_all_state($cm, $USER->id);

    // Alternative: Directe database update
    $DB->delete_records('course_modules_completion', [
        'coursemoduleid' => $cm->id,
        'userid' => $USER->id
    ]);
}

// Cache leegmaken
purge_all_caches();

echo json_encode(['status' => 'success']);


==== codequiz/db/access.php ====
<?php
defined('MOODLE_INTERNAL') || die();

$capabilities = [
    'mod/codequiz:addinstance' => [
        'captype' => 'write',
        'contextlevel' => CONTEXT_COURSE,
        'archetypes' => [
            'editingteacher' => CAP_ALLOW,
            'manager' => CAP_ALLOW
        ],
        'clonepermissionsfrom' => 'moodle/course:manageactivities'
    ],

    'mod/codequiz:view' => [
        'captype' => 'read',
        'contextlevel' => CONTEXT_MODULE,
        'archetypes' => [
            'student' => CAP_ALLOW,
            'teacher' => CAP_ALLOW,
            'editingteacher' => CAP_ALLOW,
            'manager' => CAP_ALLOW
        ]
    ],

    'mod/codequiz:managedashboard' => [
        'captype' => 'read',
        'contextlevel' => CONTEXT_MODULE,
        'archetypes' => [
            'teacher' => CAP_ALLOW,
            'editingteacher' => CAP_ALLOW,
            'manager' => CAP_ALLOW
        ]
    ]
];



==== codequiz/db/install.xml ====
<?xml version="1.0" encoding="UTF-8" ?>
<XMLDB PATH="mod/codequiz/db" VERSION="20250328" COMMENT="XMLDB schema for codequiz module">
    <TABLES>
        <TABLE NAME="codequiz" COMMENT="codequiz module data">
            <FIELDS>
                <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true" COMMENT="Primary key"/>
                <FIELD NAME="course" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" COMMENT="Course ID"/>
                <FIELD NAME="name" TYPE="char" LENGTH="255" NOTNULL="true" COMMENT="Name of the activity"/>
                <FIELD NAME="intro" TYPE="text" NOTNULL="false" COMMENT="Introduction description"/>
                <FIELD NAME="introformat" TYPE="int" LENGTH="4" NOTNULL="true" DEFAULT="1" COMMENT="Intro format"/>
                <FIELD NAME="completionpass" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" COMMENT="Completion rule: mark complete after result"/>
                <FIELD NAME="timecreated" TYPE="int" LENGTH="10" NOTNULL="true" COMMENT="Timestamp creation"/>
                <FIELD NAME="timemodified" TYPE="int" LENGTH="10" NOTNULL="true" COMMENT="Timestamp modified"/>
            </FIELDS>
            <KEYS>
                <KEY NAME="primary" TYPE="primary" FIELDS="id" COMMENT="Primary key id"/>
            </KEYS>
        </TABLE>

        <TABLE NAME="codequiz_questions" COMMENT="Configureerbare vragen per activiteit">
            <FIELDS>
                <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
                <FIELD NAME="codequizid" TYPE="int" LENGTH="10" NOTNULL="true"/>
                <FIELD NAME="vraag" TYPE="text" NOTNULL="true"/>
                <FIELD NAME="mediahtml" TYPE="text" NOTNULL="false"/>
                <FIELD NAME="crop" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="1"/>
                <FIELD NAME="opties" TYPE="text" NOTNULL="true"/>
                <FIELD NAME="sortorder" TYPE="int" LENGTH="4" NOTNULL="true" DEFAULT="0"/>
            </FIELDS>
            <KEYS>
                <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
            </KEYS>
        </TABLE>

        <TABLE NAME="codequiz_results" COMMENT="Resultaten">
            <FIELDS>
                <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
                <FIELD NAME="codequizid" TYPE="int" LENGTH="10" NOTNULL="true"/>
                <FIELD NAME="courseid" TYPE="int" LENGTH="10" NOTNULL="true"/>
                <FIELD NAME="userid" TYPE="int" LENGTH="10" NOTNULL="true"/>
                <FIELD NAME="labels" TYPE="text" NOTNULL="true"/>
                <FIELD NAME="message" TYPE="text" NOTNULL="true"/>
                <FIELD NAME="answers" TYPE="text" NOTNULL="false"/> <!-- Nieuw veld -->
                <FIELD NAME="timecreated" TYPE="int" LENGTH="10" NOTNULL="true"/>
            </FIELDS>
            <KEYS>
                <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
            </KEYS>
        </TABLE>
    </TABLES>
</XMLDB>



==== codequiz/lang/en/codequiz.php ====
<?php
$string['pluginname'] = 'Code Quiz';
$string['modulename'] = 'Code Quiz';
$string['modulenameplural'] = 'Code Quizzes';
$string['pluginadministration'] = 'Code quiz administration';
$string['codequiz:addinstance'] = 'Add a new Code quiz activity';
$string['codequiz:view'] = 'View Code quiz';
$string['completionpass'] = 'Quiz voltooid na resultaat';
$string['completionpass_help'] = 'De activiteit wordt als voltooid beschouwd zodra de gebruiker een quizresultaat heeft ingediend.';
$string['completionpass_label'] = 'Quiz voltooid na resultaat';
$string['welkomstbericht'] = 'Bericht aan gebruiker';
$string['name'] = 'Activiteitsnaam';
$string['dashboard'] = 'Dashboard';
$string['addquestion'] = 'Voeg nog een vraag toe';

